      subroutine tauget_mod(zs,delta,n,phcd,ttc,dtdd,dtdh,modnam)
c
c     This routine calls the IASP91 tau-spline travel-time software
c     known as libtau.f and libsun.f .
c
c     If this software is not yet available, it can be retrieved from 
c     anonymous ftp-server at the USGS, at IRIS and from the RSES, ANU, 
c     Canberra.
c
      save

      include 'ttimes.h'

      logical prnt(3)
      character*8 phlst(10)
      character*20 modnam
      dimension usrc(2)

      data in/1/,phlst(1)/'ALL'/,prnt(3)/.true./
c
      prnt(1) = .false.
      prnt(2) = .false.
      call tabin(in,modnam)
      call brnset(1,phlst,prnt)
      call depset(zs,usrc)
      call trtm(delta,n,ttc,dtdd,dtdh,phcd)
c
      call retrns(in)
      return
      end
cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
      function tauget_ray(phase,phtyp,rayp0,modnam,depth,delray,ttray)
c
c     This routine calls the IASP91 tau-spline travel-time software
c     known as libtau.f and libsun.f .
c
c     If this software is not yet available, it can be retrieved from 
c     anonymous ftp-server at the USGS, at IRIS, and from the RSES, ANU, 
c     Canberra.
c

      logical prnt(3)
      character*8 phlst(10)
      character*20 modnam

      double precision rayp0, delray, ttray, depth
      character*8 phase,phtyp*1, phase_type*1
      dimension usrc(2)

      logical tauget_ray, oneray, rayok

      data in/1/,phlst(1)/'ALL'/,prnt(3)/.true./

      tauget_ray = .false.
      rayok      = .false.
      delray     = 0.d0
      ttray      = 0.d0
      tcor       = 0.
      xcor       = 0.
c

      if(phtyp.eq.' ') then
	 if(phase.eq.' ' ) then
	    if(rayp0.le.20.d0) then
	       phtyp = 'P'
	       phase = 'PKPdf'
	    else
	       phtyp = 'S'
	       phase = 'S'
	    endif
	 else
	    phtyp = phase_type(phase)
	 endif
      endif

      prnt(1) = .false.
      prnt(2) = .false.
      call tabin(in,modnam)
      call brnset(1,phlst,prnt)

      rayp = sngl(rayp0)
      zs   = sngl(depth)

      call depset(zs,usrc)

      itest = 0

100   rayok = oneray(phase,rayp,xcor,tcor)

c     print *,phase,rayp,xcor,tcor,rayok

      if(rayok) then

         delray     = dble(xcor)
	 ttray      = dble(tcor)
	 tauget_ray = .true.

	 go to 900

      else

         if(phtyp .eq. 'P') then

	    if(rayp0.lt.5.d0 .and. itest.eq.0) then
	       phase = 'PKPdf'
	       itest = 1
	       go to 100
	    endif
     
	    if(itest.eq.1) then

	      if(phase.eq.'PKPdf') then
  	         phase = 'PKPdif'
	         go to 100
              endif
     
	      if(phase.eq.'PKPdif') then
	         phase = 'PKPbc'
	         go to 100
              endif
     
	      if(phase.eq.'PKPbc') then
	         phase = 'PKPab'
	         go to 100
              endif
     
	      if(phase.eq.'PKPab') then
	         phase = 'Pdif'
	         go to 100
              endif

	      if(phase.eq.'Pdif') then
	         phase = 'PKiKP'
	         go to 100
              endif

            endif
     
	    if(rayp0.le.21.d0 .and. itest.ge.0) then
	      phase = 'P'
	      itest = -1
	      go to 100
            endif

	    if(itest.lt.0) then

	      if(phase.eq.'P') then
	        phase = 'Pn'
	        go to 100
              endif

	      if(phase.eq.'Pn') then
	         phase = 'Pb'
	         go to 100
              endif

	      if(phase.eq.'Pb') then
	         phase = 'Pg'
	         go to 100
              endif

            endif

         else if(phtyp .eq. 'S') then

	    if(rayp0.lt.9.d0 .and. itest.eq.0) then
	       phase = 'SKSdf'
	       itest = 1
	       go to 100
	    endif

	    if(itest.eq.1) then

	      if(phase.eq.'SKSdf') then
	         phase = 'SKSdif'
	         go to 100
              endif

	      if(phase.eq.'SKSdif') then
	         phase = 'SKSac'
	         go to 100
              endif

	      if(phase.eq.'SKSac') then
	         phase = 'Sdif'
	         go to 100
              endif

	    endif

	    if(itest.eq.1) then
	       phase = 'S'
	       itest = -1
	       go to 100
            endif

	    if(itest.lt.0) then

	      if(phase.eq.'S') then
	         phase = 'Sn'
	         go to 100
              endif

	      if(phase.eq.'Sn') then
	         phase = 'Sb'
	         go to 100
              endif

	      if(phase.eq.'Sb') then
	         phase = 'Sg'
	         go to 100
              endif

            endif

         endif

      endif

900   in = 1
      call retrns(in)

      return
      end

cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
      subroutine ellip(ecolate,ecolats,azi,baz,del,zo,phas,p,
     *                         ecor,ierr)
c
c****6789012345678901234567890123456789012345678901234567890123456789012
c
c     subroutine ellip calls the subroutine to calculates an ellipticity 
c     correction  for a given source-receiver combination for seismic 
c     phases of the IASP91 tables (as far as availablbe); approximation 
c     for several not defined phases.
c
c     input:  ecolate, ecolats   geocentric colatitudes of event and 
c                                station [deg]
c
c             azi,baz            azimuth from event to station and 
c                                reverse [deg]
c
c             del                distance between event and station 
c                                [deg]
c
c             zo                 event depth [km]
c
c             phas               phase name
c
c             p                  ray paramter of the phase [sec/deg]
c
c     output: ecor               ellipticity correction of this phase 
c                                [sec] has to be added to the spherical 
c                                travel times.
c
c             ierr               error status
c
c
c version:  24. October 1996,  Johannes Schweitzer
c

      integer ierr
      real*4  ecolate,ecolats,azi,baz,p,ecor,p1,delo,zo,ecorr1,ecorr2,
     *        d1,del,azi1,baz1
      character*8 phas, phas1

c
c     definition of several constants:
c
      ierr = 0
      ecor = 0.
      d1   = 0.
      azi1 = azi
      baz1 = baz
      delo = del

      phas1 = phas
 
      call elpcor(phas1,delo,zo,azi1,ecolate,ecor,ierr)

      if(ierr.ne.0) then
 
	 ierr   = 0
         ecor   = 0.
         ecorr1 = 0.
         ecorr2 = 0.

         if(phas1(1:1).eq.'p' .or. phas1(1:1).eq.'s') then
            phas1(1:7)=phas1(2:8)
            phas1(8:8)=' '
         endif

	 if(phas1(1:6).eq.'PKPdif') phas1='PKPbc'
 
         if(phas1(1:4).eq."P'P'" ) then
            phas1(1:3)='PKP'
            phas1(4:7) = phas1(5:8)
            phas1(8:8)= ' '
         else if(phas1(1:4).eq."S'S'") then
            phas1(1:3)='SKS'
            phas1(4:7) = phas1(5:8)
            phas1(8:8)= ' '
         else if(phas1(1:2).eq.'PP') then
            phas1  = 'P'
         else if(phas1(1:4).eq.'PnPn') then
            phas1  = 'Pn'
         else if(phas1(1:4).eq.'PgPg') then
            phas1  = 'Pg'
         else if(phas1(1:4).eq.'PbPb') then
            phas1  = 'Pg'
         else if(phas1(1:2).eq.'SS') then
            phas1  = 'S'
         else if(phas1(1:4).eq.'SnSn') then
            phas1  = 'Sn'
         else if(phas1(1:4).eq.'SgSg') then
            phas1  = 'Sg'
         else if(phas1(1:4).eq.'SbSb') then
            phas1  = 'Sg'
         else
	    ierr = 999
            go to 100
         endif

	 p1 = p
	 if(del.eq.0. .and. phas1(3:3).ne.'i') then
      	    if (phas1(1:2).eq.'PK'.or.phas1(1:2).eq.'SK') p1=-999.
	 endif

         if(p1.ge.0.) then
            delo = del / 2.
         else
            delo = (360. - del)/2.
	    baz1  = baz1 - 180.
	    if(baz1.lt.0.) baz1 = 360. + baz1
	    azi1  = azi - 180.
	    if(azi1.lt.0.) azi1 = 360. + azi1
         endif

         call elpcor(phas1,delo,zo,azi1,ecolate,ecorr1,ierr1)
         call elpcor(phas1,delo,d1,baz1,ecolats,ecorr2,ierr2)

         if(ierr1.ne.0 .or. ierr2.ne.0) then
	    ierr = 999
	    go to 100
	 endif
   
         ecor = ecorr1 + ecorr2

      endif

100   return
      end
	subroutine elpcor(phid,del,z,azi,ecolat,ecorr,ierr)
c
c
c	This subroutine computes an ellipticity correction based
c	on the source to receiver distance and azimuth, and the source
c	depth and colatitude. The correction scheme was developed by
c	Dziewonski and Gilbert (Geophys. J. R. astr. Soc, 44, 7-17, 
c       1976), and the tabulated values were developed by Brian Kennett 
c       (IASPEI 1991 Seismological Tables, B.L.N. Kennett, Editor, 
c       Research School of Earth Sciences, Australian National 
c       University, p149-163). This travel time correction is to be 
c       added to the value estimated for a spherical earth.
c
c	The ellipticity correction is given by:
c
c	ecorr = 0.25(1+3cos(2*ecolat))*t1
c
c		 + sqrt(3)/2 * sin(2*ecolat)*cos(azi)*t1
c
c		 + sqrt(3)/2 * (sin(ecolat))**2 * cos(2*azi)*t2
c
c	where t0, t1, and t2 are the distance and depth dependent 
c	tabulated values.
c
c	INPUT:
c
c		phid	- Phase id (character*8).
c
c		del	- Epicenter to receiver, distance in degrees.
c
c		z	- Source depth, in km.
c
c		azi	- Epicenter to receiver azimuth, in degrees.
c
c		ecolat	- Epicenter colatitude, in degrees.
c
c	OUTPUT:
c
c		ecorr	- Travel time correction due to ellipticity,
c			  in seconds.
c
c	Written 28 May 1991 by David Taylor, ENSCO, Inc.
c
c
c-----------------------------------------------------------------------
c
c       ierr = 0   everything is ok.
c       ierr = 999 in the case that an ellipticity correction
c                  could not be determined
c       12. May 1993  Johannes Schweitzer
c
c-----------------------------------------------------------------------
c
	real*4 del, z, azi, ecolat, ecorr
	real*4 depth(8), delinc, t(3), delmin(11), delmax(11)
c
c ----  tau(t0 t1 and t2,distance,depth,phase)
c ----  the 11 phases are:	ips = 1		P
c				ips = 2		PcP
c				ips = 3		PKPab
c				ips = 4		PKPbc
c				ips = 5		PKPdf
c				ips = 6		S
c				ips = 7		ScS
c				ips = 8		SKSac
c				ips = 9		SKSdf
c				ips = 10	ScP
c				ips = 11	SKP
	real*4 tau(3,21,8,11)
	character*8 phid
c
c ----  convert degrees to radians
c
	data degrad/0.0174532925d0/
c
c ----  source depths for all tables
c
	data depth/0.0,35.0,50.0,100.0,200.0,300.0,500.0,700.0/
c
c ----  distance increment for all the tables
c
	data delinc/5.0/
c
c ----  minimum and maximum distances for each table
c
	data delmin/  0.0, 0.0,145.0,145.0,115.0,  0.0, 0.0, 65.0,
     +	105.0,0.0,110.0/
	data delmax/100.0,90.0,175.0,155.0,180.0,100.0,90.0,140.0,
     +	180.0,60.0,180.0/
c
c
c ----  Here are all the ellipticity tables in Kennett's book:
c
c ----  P 0 km
 	data (( tau(i,j,1,1), i=1,3), j=1,21) /
     +           0.00, 0.00, 0.00,-0.18,-0.01, 0.00,-0.32,-0.05,-0.01,
     +          -0.46,-0.10,-0.02,-0.56,-0.16,-0.06,-0.62,-0.21,-0.10,
     +          -0.66,-0.30,-0.17,-0.66,-0.33,-0.21,-0.66,-0.37,-0.26,
     +          -0.64,-0.39,-0.33,-0.62,-0.40,-0.40,-0.58,-0.39,-0.47,
     +          -0.54,-0.35,-0.54,-0.51,-0.30,-0.60,-0.48,-0.22,-0.66,
     +          -0.45,-0.12,-0.72,-0.44,-0.01,-0.76,-0.45, 0.12,-0.80,
     +          -0.47, 0.24,-0.81,-0.51, 0.38,-0.82,-0.55, 0.46,-0.81/
c ----  P 35 km
 	data (( tau(i,j,2,1), i=1,3), j=1,21) /
     +          -0.02, 0.00, 0.00,-0.16,-0.03, 0.00,-0.31,-0.07,-0.01,
     +          -0.43,-0.12,-0.02,-0.54,-0.18,-0.06,-0.60,-0.22,-0.10,
     +          -0.64,-0.31,-0.17,-0.64,-0.34,-0.21,-0.64,-0.38,-0.26,
     +          -0.62,-0.40,-0.33,-0.60,-0.41,-0.40,-0.56,-0.39,-0.47,
     +          -0.52,-0.36,-0.54,-0.49,-0.30,-0.60,-0.45,-0.22,-0.67,
     +          -0.43,-0.13,-0.72,-0.42,-0.01,-0.76,-0.43, 0.12,-0.80,
     +          -0.45, 0.23,-0.81,-0.49, 0.37,-0.82,-0.53, 0.45,-0.81/
c ----  P 50 km
 	data (( tau(i,j,3,1), i=1,3), j=1,21) /
     +          -0.03, 0.00, 0.00,-0.16,-0.04, 0.00,-0.31,-0.07,-0.01,
     +          -0.44,-0.13,-0.03,-0.53,-0.18,-0.06,-0.59,-0.22,-0.10,
     +          -0.63,-0.31,-0.17,-0.64,-0.35,-0.21,-0.63,-0.38,-0.26,
     +          -0.62,-0.41,-0.33,-0.59,-0.41,-0.40,-0.55,-0.40,-0.47,
     +          -0.52,-0.36,-0.54,-0.48,-0.30,-0.60,-0.45,-0.22,-0.67,
     +          -0.43,-0.13,-0.72,-0.42,-0.01,-0.76,-0.42, 0.12,-0.80,
     +          -0.44, 0.23,-0.81,-0.48, 0.37,-0.82,-0.52, 0.45,-0.81/
c ---- P 100 km
 	data (( tau(i,j,4,1), i=1,3), j=1,21) /
     +          -0.05, 0.00, 0.00,-0.17,-0.04, 0.00,-0.30,-0.09,-0.01,
     +          -0.42,-0.14,-0.03,-0.52,-0.20,-0.07,-0.57,-0.23,-0.10,
     +          -0.61,-0.32,-0.17,-0.62,-0.36,-0.21,-0.61,-0.39,-0.27,
     +          -0.60,-0.42,-0.33,-0.57,-0.42,-0.40,-0.53,-0.40,-0.47,
     +          -0.50,-0.37,-0.54,-0.46,-0.31,-0.61,-0.43,-0.23,-0.67,
     +          -0.40,-0.13,-0.72,-0.39,-0.02,-0.77,-0.40, 0.11,-0.80,
     +          -0.42, 0.23,-0.82,-0.46, 0.37,-0.82,-0.50, 0.44,-0.82/
c ----  P 200 km
 	data (( tau(i,j,5,1), i=1,3), j=1,21) /
     +          -0.09, 0.00, 0.00,-0.18,-0.08, 0.00,-0.29,-0.14,-0.02,
     +          -0.40,-0.18,-0.04,-0.49,-0.23,-0.07,-0.53,-0.26,-0.10,
     +          -0.57,-0.34,-0.17,-0.58,-0.38,-0.21,-0.57,-0.42,-0.27,
     +          -0.56,-0.44,-0.33,-0.53,-0.44,-0.40,-0.49,-0.42,-0.47,
     +          -0.45,-0.38,-0.54,-0.41,-0.32,-0.61,-0.38,-0.24,-0.67,
     +          -0.36,-0.14,-0.72,-0.35,-0.03,-0.77,-0.35, 0.10,-0.80,
     +          -0.37, 0.21,-0.82,-0.42, 0.36,-0.82,-0.45, 0.43,-0.82/
c ----  P 300 km
 	data (( tau(i,j,6,1), i=1,3), j=1,21) /
     +          -0.13, 0.00, 0.00,-0.20,-0.11, 0.00,-0.29,-0.18,-0.02,
     +          -0.39,-0.22,-0.04,-0.46,-0.27,-0.07,-0.51,-0.31,-0.11,
     +          -0.54,-0.37,-0.17,-0.55,-0.41,-0.22,-0.54,-0.44,-0.27,
     +          -0.52,-0.46,-0.34,-0.49,-0.46,-0.41,-0.45,-0.44,-0.48,
     +          -0.41,-0.40,-0.55,-0.37,-0.34,-0.61,-0.34,-0.26,-0.67,
     +          -0.32,-0.15,-0.73,-0.31,-0.04,-0.77,-0.31, 0.09,-0.80,
     +          -0.33, 0.22,-0.82,-0.38, 0.35,-0.82,-0.40, 0.41,-0.82/
c ----  P 500 km
 	data (( tau(i,j,7,1), i=1,3), j=1,21) /
     +          -0.20, 0.00, 0.00,-0.25,-0.14,-0.01,-0.34,-0.27,-0.04,
     +          -0.37,-0.29,-0.05,-0.41,-0.30,-0.07,-0.47,-0.39,-0.14,
     +          -0.48,-0.42,-0.17,-0.48,-0.46,-0.22,-0.47,-0.49,-0.28,
     +          -0.45,-0.50,-0.35,-0.42,-0.50,-0.42,-0.38,-0.48,-0.49,
     +          -0.34,-0.43,-0.56,-0.30,-0.37,-0.62,-0.27,-0.28,-0.68,
     +          -0.24,-0.18,-0.74,-0.23,-0.05,-0.78,-0.24, 0.08,-0.81,
     +          -0.26, 0.22,-0.83,-0.30, 0.34,-0.83,-0.32, 0.38,-0.83/
c ----  P 700 km
 	data (( tau(i,j,8,1), i=1,3), j=1,21) /
     +          -0.27, 0.00, 0.00,-0.30,-0.20,-0.01,-0.37,-0.34,-0.06,
     +          -0.33,-0.30,-0.04,-0.41,-0.40,-0.10,-0.43,-0.43,-0.13,
     +          -0.44,-0.47,-0.18,-0.44,-0.51,-0.23,-0.42,-0.53,-0.29,
     +          -0.39,-0.54,-0.36,-0.36,-0.54,-0.43,-0.32,-0.51,-0.50,
     +          -0.27,-0.46,-0.57,-0.23,-0.39,-0.63,-0.20,-0.30,-0.69,
     +          -0.18,-0.19,-0.74,-0.16,-0.07,-0.79,-0.17, 0.08,-0.82,
     +          -0.19, 0.20,-0.83,-0.23, 0.32,-0.83,-0.24, 0.34,-0.83/
c ---- PcP 0 km
 	data (( tau(i,j,1,2), i=1,3), j=1,19) /
     +          -1.50, 0.00, 0.00,-1.49,-0.11,-0.01,-1.46,-0.22,-0.03,
     +          -1.41,-0.32,-0.06,-1.34,-0.40,-0.10,-1.26,-0.47,-0.16,
     +          -1.17,-0.52,-0.22,-1.07,-0.55,-0.28,-0.97,-0.56,-0.35,
     +          -0.88,-0.55,-0.42,-0.78,-0.51,-0.49,-0.69,-0.46,-0.56,
     +          -0.62,-0.39,-0.62,-0.55,-0.30,-0.67,-0.50,-0.20,-0.72,
     +          -0.47,-0.09,-0.76,-0.45, 0.03,-0.79,-0.45, 0.15,-0.81,
     +          -0.47, 0.27,-0.82/
c ---- PcP 35 km
 	data (( tau(i,j,2,2), i=1,3), j=1,19) /
     +          -1.48, 0.00, 0.00,-1.47,-0.11,-0.01,-1.44,-0.22,-0.03,
     +          -1.39,-0.32,-0.06,-1.32,-0.41,-0.10,-1.24,-0.47,-0.16,
     +          -1.15,-0.53,-0.22,-1.05,-0.55,-0.28,-0.95,-0.56,-0.35,
     +          -0.86,-0.55,-0.42,-0.76,-0.52,-0.49,-0.67,-0.46,-0.56,
     +          -0.60,-0.39,-0.62,-0.53,-0.30,-0.67,-0.48,-0.21,-0.72,
     +          -0.45,-0.10,-0.76,-0.43, 0.02,-0.79,-0.43, 0.14,-0.81,
     +          -0.45, 0.26,-0.82/
c ---- PcP 50 km
 	data (( tau(i,j,3,2), i=1,3), j=1,19) /
     +          -1.47, 0.00, 0.00,-1.46,-0.11,-0.01,-1.43,-0.22,-0.03,
     +          -1.38,-0.32,-0.06,-1.32,-0.41,-0.10,-1.24,-0.48,-0.16,
     +          -1.14,-0.53,-0.22,-1.05,-0.56,-0.28,-0.95,-0.56,-0.35,
     +          -0.85,-0.55,-0.42,-0.75,-0.52,-0.49,-0.67,-0.46,-0.56,
     +          -0.59,-0.39,-0.62,-0.52,-0.31,-0.67,-0.47,-0.21,-0.72,
     +          -0.44,-0.10,-0.76,-0.42, 0.02,-0.79,-0.43, 0.14,-0.81,
     +          -0.45, 0.26,-0.82/
c ---- PcP 100 km
 	data (( tau(i,j,4,2), i=1,3), j=1,19) /
     +          -1.45, 0.00, 0.00,-1.44,-0.11,-0.01,-1.41,-0.22,-0.03,
     +          -1.36,-0.32,-0.06,-1.29,-0.41,-0.10,-1.21,-0.48,-0.16,
     +          -1.12,-0.53,-0.22,-1.03,-0.56,-0.28,-0.93,-0.57,-0.35,
     +          -0.83,-0.55,-0.42,-0.73,-0.52,-0.49,-0.64,-0.47,-0.56,
     +          -0.57,-0.40,-0.62,-0.50,-0.31,-0.68,-0.45,-0.21,-0.72,
     +          -0.42,-0.10,-0.76,-0.40, 0.02,-0.79,-0.40, 0.14,-0.81,
     +          -0.42, 0.26,-0.82/
c ---- PcP 200 km
 	data (( tau(i,j,5,2), i=1,3), j=1,19) /
     +          -1.41, 0.00, 0.00,-1.40,-0.11,-0.01,-1.37,-0.22,-0.03,
     +          -1.32,-0.32,-0.06,-1.25,-0.41,-0.10,-1.17,-0.48,-0.16,
     +          -1.08,-0.53,-0.22,-0.98,-0.56,-0.28,-0.88,-0.57,-0.35,
     +          -0.78,-0.56,-0.42,-0.69,-0.53,-0.49,-0.60,-0.48,-0.56,
     +          -0.52,-0.40,-0.62,-0.46,-0.32,-0.68,-0.41,-0.22,-0.72,
     +          -0.37,-0.11,-0.76,-0.36, 0.01,-0.79,-0.36, 0.13,-0.81,
     +          -0.38, 0.25,-0.82/
c ---- PcP 300 km
 	data (( tau(i,j,6,2), i=1,3), j=1,19) /
     +          -1.37, 0.00, 0.00,-1.36,-0.12,-0.01,-1.33,-0.23,-0.03,
     +          -1.28,-0.33,-0.06,-1.21,-0.42,-0.10,-1.13,-0.49,-0.16,
     +          -1.04,-0.54,-0.22,-0.94,-0.57,-0.29,-0.84,-0.58,-0.36,
     +          -0.74,-0.57,-0.43,-0.65,-0.54,-0.49,-0.56,-0.48,-0.56,
     +          -0.48,-0.41,-0.62,-0.42,-0.33,-0.68,-0.37,-0.23,-0.73,
     +          -0.33,-0.12,-0.77,-0.32, 0.00,-0.80,-0.32, 0.12,-0.82,
     +          -0.34, 0.24,-0.82/
c ---- PcP 500 km
 	data (( tau(i,j,7,2), i=1,3), j=1,19) /
     +          -1.30, 0.00, 0.00,-1.29,-0.12,-0.01,-1.25,-0.23,-0.03,
     +          -1.20,-0.33,-0.06,-1.14,-0.42,-0.11,-1.05,-0.50,-0.16,
     +          -0.96,-0.55,-0.22,-0.87,-0.58,-0.29,-0.77,-0.59,-0.36,
     +          -0.67,-0.58,-0.43,-0.57,-0.55,-0.50,-0.48,-0.50,-0.56,
     +          -0.41,-0.43,-0.63,-0.34,-0.34,-0.68,-0.29,-0.24,-0.73,
     +          -0.26,-0.13,-0.77,-0.24,-0.02,-0.80,-0.24, 0.10,-0.82,
     +          -0.26, 0.22,-0.83/
c ---- PcP 700 km
 	data (( tau(i,j,8,2), i=1,3), j=1,19) /
     +          -1.23, 0.00, 0.00,-1.22,-0.12,-0.01,-1.19,-0.24,-0.03,
     +          -1.14,-0.34,-0.06,-1.07,-0.43,-0.11,-0.99,-0.51,-0.16,
     +          -0.90,-0.56,-0.22,-0.80,-0.59,-0.29,-0.70,-0.61,-0.36,
     +          -0.60,-0.60,-0.43,-0.50,-0.56,-0.50,-0.42,-0.51,-0.57,
     +          -0.34,-0.44,-0.63,-0.27,-0.36,-0.69,-0.22,-0.26,-0.73,
     +          -0.19,-0.15,-0.77,-0.17,-0.03,-0.80,-0.17, 0.09,-0.82,
     +          -0.19, 0.21,-0.83/
c ---- PKPab 0 km
 	data (( tau(i,j,1,3), i=1,3), j=1,7) /
     +          -1.88, 0.99,-0.42,-1.94, 0.85,-0.39,-2.01, 0.72,-0.37,
     +          -2.08, 0.59,-0.35,-2.13, 0.45,-0.34,-2.17, 0.30,-0.34,
     +          -2.19, 0.15,-0.35/
c ---- PKPab 35 km
 	data (( tau(i,j,2,3), i=1,3), j=1,7) /
     +          -1.85, 0.99,-0.42,-1.92, 0.85,-0.40,-1.99, 0.72,-0.37,
     +          -2.06, 0.59,-0.35,-2.11, 0.45,-0.34,-2.15, 0.30,-0.34,
     +          -2.17, 0.15,-0.35/
c ---- PKPab 50 km
 	data (( tau(i,j,3,3), i=1,3), j=1,7) /
     +          -1.85, 0.99,-0.42,-1.91, 0.85,-0.40,-1.98, 0.72,-0.37,
     +          -2.05, 0.59,-0.35,-2.10, 0.45,-0.34,-2.14, 0.30,-0.34,
     +          -2.16, 0.15,-0.35/
c ---- PKPab 100 km
 	data (( tau(i,j,4,3), i=1,3), j=1,7) /
     +          -1.82, 0.98,-0.42,-1.88, 0.84,-0.40,-1.96, 0.72,-0.37,
     +          -2.03, 0.58,-0.35,-2.08, 0.44,-0.34,-2.12, 0.30,-0.34,
     +          -2.14, 0.14,-0.35/
c ---- PKPab 200 km
 	data (( tau(i,j,5,3), i=1,3), j=1,7) /
     +          -1.77, 0.97,-0.43,-1.84, 0.84,-0.40,-1.92, 0.71,-0.37,
     +          -1.98, 0.58,-0.35,-2.04, 0.44,-0.34,-2.07, 0.29,-0.34,
     +          -2.09, 0.14,-0.35/
c ---- PKPab 300 km
 	data (( tau(i,j,6,3), i=1,3), j=1,7) /
     +          -1.72, 0.96,-0.43,-1.79, 0.83,-0.40,-1.87, 0.70,-0.38,
     +          -1.94, 0.57,-0.36,-1.99, 0.43,-0.35,-2.03, 0.28,-0.34,
     +          -2.05, 0.13,-0.36/
c ---- PKPab 500 km
 	data (( tau(i,j,7,3), i=1,3), j=1,7) /
     +          -1.64, 0.94,-0.44,-1.71, 0.82,-0.41,-1.79, 0.69,-0.38,
     +          -1.86, 0.56,-0.36,-1.92, 0.42,-0.35,-1.96, 0.27,-0.35,
     +          -0.32, 0.38,-0.83/
c ---- PKPab 700 km
 	data (( tau(i,j,8,3), i=1,3), j=1,7) /
     +          -1.55, 0.93,-0.45,-1.64, 0.80,-0.42,-1.72, 0.68,-0.39,
     +          -1.79, 0.55,-0.37,-1.85, 0.41,-0.36,-1.89, 0.26,-0.35,
     +          -1.89, 0.26,-0.35/
c ---- PKPbc 0 km
 	data (( tau(i,j,1,4), i=1,3), j=1,3) /
     +          -1.93, 1.03,-0.39,-2.15, 0.99,-0.29,-2.32, 0.89,-0.21/
c ---- PKPbc 35 km
 	data (( tau(i,j,2,4), i=1,3), j=1,3) /
     +          -1.92, 1.03,-0.39,-2.13, 0.99,-0.29,-2.30, 0.89,-0.21/
c ---- PKPbc 50 km
 	data (( tau(i,j,3,4), i=1,3), j=1,3) /
     +          -1.91, 1.03,-0.39,-2.12, 0.99,-0.29,-2.29, 0.89,-0.21/
c ---- PKPbc 100 km
 	data (( tau(i,j,4,4), i=1,3), j=1,3) /
     +          -1.89, 1.04,-0.39,-2.10, 0.99,-0.29,-2.27, 0.89,-0.21/
c ---- PKPbc 200 km
 	data (( tau(i,j,5,4), i=1,3), j=1,3) /
     +          -1.85, 1.04,-0.39,-2.06, 0.99,-0.29,-2.23, 0.88,-0.21/
c ---- PKPbc 300 km
 	data (( tau(i,j,6,4), i=1,3), j=1,3) /
     +          -1.81, 1.04,-0.39,-2.02, 0.98,-0.29,-2.19, 0.88,-0.21/
c ---- PKPbc 500 km
 	data (( tau(i,j,7,4), i=1,3), j=1,3) /
     +          -1.75, 1.04,-0.38,-1.95, 0.98,-0.29,-1.95, 0.98,-0.29/
c ---- PKPbc 700 km
 	data (( tau(i,j,8,4), i=1,3), j=1,3) /
     +          -1.69, 1.05,-0.38,-1.88, 0.99,-0.29,-1.88, 0.99,-0.29/
c ---- PKPdf 0 km
 	data (( tau(i,j,1,5), i=1,3), j=1,14) /
     +          -1.03, 0.98,-0.87,-1.18, 1.09,-0.80,-1.35, 1.16,-0.71,
     +          -1.52, 1.20,-0.62,-1.69, 1.20,-0.53,-1.87, 1.17,-0.44,
     +          -2.03, 1.11,-0.35,-2.19, 1.02,-0.27,-2.34, 0.90,-0.19,
     +          -2.46, 0.75,-0.13,-2.56, 0.58,-0.07,-2.64, 0.40,-0.03,
     +          -2.69, 0.20,-0.01,-2.70, 0.00, 0.00/
c ---- PKPdf 35 km
 	data (( tau(i,j,2,5), i=1,3), j=1,14) /
     +          -1.01, 0.98,-0.87,-1.16, 1.08,-0.80,-1.33, 1.16,-0.71,
     +          -1.50, 1.19,-0.62,-1.67, 1.20,-0.53,-1.85, 1.17,-0.44,
     +          -2.01, 1.11,-0.35,-2.17, 1.02,-0.27,-2.32, 0.90,-0.19,
     +          -2.44, 0.75,-0.13,-2.54, 0.58,-0.07,-2.62, 0.40,-0.03,
     +          -2.67, 0.20,-0.01,-2.68, 0.00, 0.00/
c ---- PKPdf 50 km
 	data (( tau(i,j,3,5), i=1,3), j=1,14) /
     +          -1.01, 0.98,-0.87,-1.16, 1.08,-0.80,-1.32, 1.16,-0.71,
     +          -1.49, 1.19,-0.62,-1.67, 1.20,-0.53,-1.84, 1.17,-0.44,
     +          -2.01, 1.11,-0.35,-2.16, 1.02,-0.27,-2.31, 0.90,-0.19,
     +          -2.44, 0.75,-0.13,-2.54, 0.58,-0.07,-2.61, 0.40,-0.03,
     +          -2.66, 0.20,-0.01,-2.68, 0.00, 0.00/
c ---- PKPdf 100 km
 	data (( tau(i,j,4,5), i=1,3), j=1,14) /
     +          -0.99, 0.98,-0.87,-1.13, 1.08,-0.80,-1.30, 1.15,-0.71,
     +          -1.47, 1.19,-0.62,-1.64, 1.20,-0.53,-1.82, 1.17,-0.44,
     +          -1.99, 1.11,-0.35,-2.14, 1.02,-0.27,-2.29, 0.90,-0.19,
     +          -2.41, 0.75,-0.13,-2.52, 0.58,-0.07,-2.59, 0.40,-0.03,
     +          -2.64, 0.20,-0.01,-2.66, 0.00, 0.00/
c ---- PKPdf 200 km
 	data (( tau(i,j,5,5), i=1,3), j=1,14) /
     +          -0.94, 0.98,-0.87,-1.09, 1.08,-0.80,-1.25, 1.15,-0.71,
     +          -1.43, 1.19,-0.62,-1.60, 1.20,-0.53,-1.77, 1.17,-0.44,
     +          -1.94, 1.11,-0.35,-2.10, 1.02,-0.27,-2.25, 0.90,-0.19,
     +          -2.37, 0.75,-0.13,-2.47, 0.58,-0.07,-2.55, 0.40,-0.03,
     +          -2.60, 0.20,-0.01,-2.61, 0.00, 0.00/
c ---- PKPdf 300 km
 	data (( tau(i,j,6,5), i=1,3), j=1,14) /
     +          -0.90, 0.98,-0.87,-1.05, 1.08,-0.80,-1.21, 1.15,-0.71,
     +          -1.39, 1.19,-0.62,-1.56, 1.19,-0.53,-1.73, 1.17,-0.44,
     +          -1.90, 1.11,-0.35,-2.06, 1.01,-0.27,-2.21, 0.89,-0.19,
     +          -2.33, 0.75,-0.13,-2.43, 0.58,-0.07,-2.51, 0.40,-0.03,
     +          -2.56, 0.20,-0.01,-2.57, 0.00, 0.00/
c ---- PKPdf 500 km
 	data (( tau(i,j,7,5), i=1,3), j=1,14) /
     +          -0.83, 0.98,-0.87,-0.98, 1.08,-0.80,-1.14, 1.15,-0.71,
     +          -1.31, 1.19,-0.62,-1.49, 1.19,-0.53,-1.66, 1.16,-0.44,
     +          -1.83, 1.10,-0.35,-1.99, 1.01,-0.27,-2.13, 0.89,-0.19,
     +          -2.26, 0.75,-0.13,-2.36, 0.58,-0.07,-2.44, 0.40,-0.03,
     +          -2.48, 0.20,-0.01,-2.50, 0.00, 0.00/
c ---- PKPdf 700 km
 	data (( tau(i,j,8,5), i=1,3), j=1,14) /
     +          -0.76, 0.97,-0.87,-0.91, 1.08,-0.80,-1.07, 1.15,-0.71,
     +          -1.25, 1.19,-0.62,-1.42, 1.19,-0.53,-1.59, 1.16,-0.44,
     +          -1.76, 1.10,-0.35,-1.92, 1.01,-0.27,-2.07, 0.89,-0.19,
     +          -2.19, 0.75,-0.13,-2.30, 0.58,-0.07,-2.37, 0.40,-0.03,
     +          -2.42, 0.20,-0.01,-2.43, 0.00, 0.00/
c ---- S 0 km
 	data (( tau(i,j,1,6), i=1,3), j=1,21) /
     +           0.00, 0.00, 0.00,-0.31,-0.02, 0.00,-0.57,-0.09,-0.01,
     +          -0.81,-0.19,-0.04,-1.02,-0.30,-0.11,-1.15,-0.42,-0.21,
     +          -1.19,-0.51,-0.28,-1.20,-0.60,-0.37,-1.19,-0.67,-0.47,
     +          -1.16,-0.72,-0.59,-1.12,-0.73,-0.71,-1.06,-0.71,-0.83,
     +          -0.99,-0.65,-0.96,-0.92,-0.56,-1.08,-0.87,-0.42,-1.19,
     +          -0.83,-0.26,-1.29,-0.81,-0.05,-1.38,-0.81, 0.17,-1.44,
     +          -0.86, 0.42,-1.48,-0.93, 0.67,-1.50,-1.02, 0.86,-1.49/
c ---- S 35 km
 	data (( tau(i,j,2,6), i=1,3), j=1,21) /
     +          -0.03, 0.00, 0.00,-0.29,-0.05, 0.00,-0.55,-0.12,-0.01,
     +          -0.79,-0.21,-0.04,-0.99,-0.32,-0.12,-1.12,-0.44,-0.21,
     +          -1.16,-0.53,-0.28,-1.17,-0.62,-0.37,-1.16,-0.69,-0.47,
     +          -1.13,-0.73,-0.59,-1.08,-0.74,-0.71,-1.02,-0.72,-0.83,
     +          -0.96,-0.67,-0.96,-0.89,-0.57,-1.08,-0.83,-0.43,-1.20,
     +          -0.79,-0.26,-1.30,-0.77,-0.06,-1.38,-0.78, 0.17,-1.44,
     +          -0.82, 0.42,-1.48,-0.90, 0.66,-1.50,-0.98, 0.85,-1.49/
c ---- S 50 km
 	data (( tau(i,j,3,6), i=1,3), j=1,21) /
     +          -0.05, 0.00, 0.00,-0.29,-0.07, 0.00,-0.55,-0.13,-0.01,
     +          -0.77,-0.22,-0.04,-0.98,-0.33,-0.12,-1.11,-0.44,-0.21,
     +          -1.14,-0.54,-0.28,-1.16,-0.62,-0.37,-1.15,-0.69,-0.48,
     +          -1.12,-0.74,-0.59,-1.07,-0.75,-0.71,-1.01,-0.73,-0.84,
     +          -0.94,-0.67,-0.96,-0.88,-0.57,-1.08,-0.82,-0.44,-1.20,
     +          -0.78,-0.27,-1.30,-0.76,-0.06,-1.38,-0.77, 0.16,-1.44,
     +          -0.81, 0.41,-1.48,-0.88, 0.66,-1.50,-0.97, 0.85,-1.49/
c ---- S 100 km
 	data (( tau(i,j,4,6), i=1,3), j=1,21) /
     +          -0.08, 0.00, 0.00,-0.30,-0.06, 0.00,-0.54,-0.17,-0.02,
     +          -0.77,-0.26,-0.04,-0.95,-0.36,-0.12,-1.07,-0.46,-0.21,
     +          -1.11,-0.56,-0.28,-1.12,-0.64,-0.38,-1.11,-0.71,-0.48,
     +          -1.08,-0.76,-0.59,-1.03,-0.77,-0.71,-0.97,-0.75,-0.84,
     +          -0.90,-0.68,-0.97,-0.84,-0.59,-1.09,-0.78,-0.45,-1.20,
     +          -0.74,-0.28,-1.30,-0.72,-0.07,-1.38,-0.73, 0.16,-1.45,
     +          -0.77, 0.41,-1.49,-0.84, 0.65,-1.50,-0.93, 0.83,-1.49/
c ---- S 200 km
 	data (( tau(i,j,5,6), i=1,3), j=1,21) /
     +          -0.16, 0.00, 0.00,-0.33,-0.14,-0.01,-0.71,-0.33,-0.05,
     +          -0.74,-0.34,-0.06,-0.90,-0.43,-0.13,-1.00,-0.50,-0.20,
     +          -1.04,-0.61,-0.29,-1.05,-0.69,-0.38,-1.04,-0.75,-0.48,
     +          -1.01,-0.80,-0.60,-0.96,-0.80,-0.72,-0.90,-0.78,-0.85,
     +          -0.83,-0.72,-0.97,-0.76,-0.61,-1.09,-0.70,-0.47,-1.21,
     +          -0.66,-0.30,-1.31,-0.64,-0.09,-1.39,-0.65, 0.14,-1.45,
     +          -0.69, 0.39,-1.49,-0.76, 0.64,-1.50,-0.84, 0.81,-1.50/
c ---- S 300 km
 	data (( tau(i,j,6,6), i=1,3), j=1,21) /
     +          -0.24, 0.00, 0.00,-0.37,-0.20,-0.01,-0.53,-0.33,-0.03,
     +          -0.72,-0.40,-0.08,-0.88,-0.47,-0.15,-0.94,-0.56,-0.21,
     +          -0.98,-0.66,-0.30,-0.99,-0.74,-0.39,-0.97,-0.80,-0.49,
     +          -0.94,-0.84,-0.61,-0.89,-0.84,-0.73,-0.82,-0.81,-0.85,
     +          -0.75,-0.75,-0.98,-0.69,-0.64,-1.10,-0.63,-0.50,-1.21,
     +          -0.58,-0.32,-1.31,-0.56,-0.11,-1.39,-0.57, 0.12,-1.46,
     +          -0.61, 0.38,-1.50,-0.69, 0.62,-1.51,-0.75, 0.78,-1.50/
c ---- S 500 km
 	data (( tau(i,j,7,6), i=1,3), j=1,21) /
     +          -0.37, 0.00, 0.00,-0.46,-0.26,-0.01,-0.60,-0.48,-0.07,
     +          -0.67,-0.52,-0.09,-0.80,-0.59,-0.16,-0.84,-0.67,-0.23,
     +          -0.87,-0.76,-0.31,-0.87,-0.83,-0.40,-0.86,-0.89,-0.51,
     +          -0.82,-0.92,-0.62,-0.76,-0.91,-0.74,-0.69,-0.88,-0.87,
     +          -0.62,-0.81,-1.00,-0.55,-0.69,-1.12,-0.49,-0.55,-1.23,
     +          -0.45,-0.36,-1.33,-0.43,-0.15,-1.41,-0.43, 0.09,-1.47,
     +          -0.48, 0.35,-1.51,-0.55, 0.60,-1.52,-0.60, 0.71,-1.51/
c ---- S 700 km
 	data (( tau(i,j,8,6), i=1,3), j=1,21) /
     +          -0.49, 0.00, 0.00,-0.55,-0.28,-0.01,-0.63,-0.58,-0.09,
     +          -0.65,-0.60,-0.10,-0.73,-0.69,-0.17,-0.77,-0.77,-0.23,
     +          -0.79,-0.86,-0.32,-0.79,-0.92,-0.41,-0.76,-0.97,-0.52,
     +          -0.71,-0.99,-0.64,-0.65,-0.99,-0.76,-0.58,-0.94,-0.89,
     +          -0.50,-0.86,-1.01,-0.43,-0.74,-1.13,-0.37,-0.59,-1.25,
     +          -0.32,-0.40,-1.34,-0.30,-0.18,-1.42,-0.31, 0.07,-1.48,
     +          -0.35, 0.33,-1.52,-0.43, 0.57,-1.53,-0.45, 0.64,-1.52/
c ---- ScS 0 km
 	data (( tau(i,j,1,7), i=1,3), j=1,19) /
     +          -2.74, 0.00, 0.00,-2.72,-0.21,-0.01,-2.67,-0.40,-0.05,
     +          -2.57,-0.58,-0.11,-2.45,-0.74,-0.19,-2.31,-0.86,-0.29,
     +          -2.14,-0.96,-0.40,-1.96,-1.01,-0.52,-1.78,-1.03,-0.64,
     +          -1.60,-1.00,-0.77,-1.43,-0.94,-0.90,-1.27,-0.84,-1.02,
     +          -1.13,-0.71,-1.13,-1.01,-0.56,-1.23,-0.92,-0.38,-1.32,
     +          -0.86,-0.17,-1.39,-0.83, 0.04,-1.45,-0.83, 0.26,-1.48,
     +          -0.87, 0.48,-1.50/
c ---- ScS 35 km
 	data (( tau(i,j,2,7), i=1,3), j=1,19) /
     +          -2.71, 0.00, 0.00,-2.69,-0.21,-0.01,-2.63,-0.40,-0.05,
     +          -2.54,-0.58,-0.11,-2.42,-0.74,-0.19,-2.27,-0.87,-0.29,
     +          -2.11,-0.96,-0.40,-1.93,-1.01,-0.52,-1.75,-1.03,-0.64,
     +          -1.57,-1.01,-0.77,-1.40,-0.95,-0.90,-1.24,-0.85,-1.02,
     +          -1.09,-0.72,-1.13,-0.98,-0.56,-1.23,-0.88,-0.38,-1.32,
     +          -0.82,-0.18,-1.39,-0.79, 0.03,-1.45,-0.80, 0.25,-1.48,
     +          -0.83, 0.47,-1.50/
c ---- ScS 50 km
 	data (( tau(i,j,3,7), i=1,3), j=1,19) /
     +          -2.70, 0.00, 0.00,-2.68,-0.21,-0.01,-2.62,-0.40,-0.05,
     +          -2.53,-0.59,-0.11,-2.41,-0.74,-0.19,-2.26,-0.87,-0.29,
     +          -2.10,-0.96,-0.40,-1.92,-1.02,-0.52,-1.74,-1.03,-0.64,
     +          -1.56,-1.01,-0.77,-1.38,-0.95,-0.90,-1.22,-0.85,-1.02,
     +          -1.08,-0.72,-1.13,-0.96,-0.57,-1.23,-0.87,-0.38,-1.32,
     +          -0.81,-0.18,-1.39,-0.78, 0.03,-1.45,-0.78, 0.25,-1.48,
     +          -0.82, 0.47,-1.50/
c ---- ScS 100 km
 	data (( tau(i,j,4,7), i=1,3), j=1,19) /
     +          -2.66, 0.00, 0.00,-2.64,-0.21,-0.01,-2.58,-0.41,-0.05,
     +          -2.49,-0.59,-0.11,-2.37,-0.75,-0.19,-2.22,-0.87,-0.29,
     +          -2.06,-0.97,-0.40,-1.88,-1.02,-0.52,-1.70,-1.04,-0.64,
     +          -1.52,-1.02,-0.77,-1.34,-0.95,-0.90,-1.18,-0.86,-1.02,
     +          -1.04,-0.73,-1.13,-0.92,-0.57,-1.23,-0.83,-0.39,-1.32,
     +          -0.77,-0.19,-1.39,-0.74, 0.02,-1.45,-0.74, 0.24,-1.49,
     +          -0.78, 0.46,-1.50/
c ---- ScS 200 km
 	data (( tau(i,j,5,7), i=1,3), j=1,19) /
     +          -2.58, 0.00, 0.00,-2.56,-0.21,-0.01,-2.50,-0.41,-0.05,
     +          -2.41,-0.59,-0.11,-2.29,-0.75,-0.19,-2.14,-0.88,-0.29,
     +          -1.98,-0.98,-0.40,-1.80,-1.03,-0.52,-1.62,-1.05,-0.65,
     +          -1.44,-1.03,-0.77,-1.26,-0.97,-0.90,-1.10,-0.87,-1.02,
     +          -0.96,-0.74,-1.14,-0.85,-0.59,-1.24,-0.75,-0.41,-1.32,
     +          -0.69,-0.21,-1.40,-0.66, 0.01,-1.45,-0.66, 0.23,-1.49,
     +          -0.70, 0.45,-1.51/
c ---- ScS 300 km
 	data (( tau(i,j,6,7), i=1,3), j=1,19) /
     +          -2.51, 0.00, 0.00,-2.49,-0.21,-0.01,-2.43,-0.41,-0.05,
     +          -2.43,-0.60,-0.11,-2.21,-0.76,-0.19,-2.07,-0.89,-0.29,
     +          -1.90,-0.99,-0.40,-1.72,-1.04,-0.52,-1.54,-1.06,-0.65,
     +          -1.36,-1.04,-0.78,-1.19,-0.98,-0.90,-1.03,-0.89,-1.03,
     +          -0.89,-0.76,-1.14,-0.77,-0.60,-1.24,-0.68,-0.42,-1.33,
     +          -0.61,-0.22,-1.40,-0.58,-0.01,-1.46,-0.59, 0.21,-1.49,
     +          -0.62, 0.43,-1.51/
c ---- ScS 500 km
 	data (( tau(i,j,7,7), i=1,3), j=1,19) /
     +          -2.37, 0.00, 0.00,-2.35,-0.22,-0.01,-2.29,-0.42,-0.05,
     +          -2.20,-0.61,-0.11,-2.08,-0.77,-0.19,-1.93,-0.91,-0.29,
     +          -1.76,-1.01,-0.40,-1.59,-1.07,-0.52,-1.40,-1.09,-0.65,
     +          -1.22,-1.07,-0.78,-1.05,-1.01,-0.91,-0.89,-0.92,-1.03,
     +          -0.75,-0.79,-1.14,-0.63,-0.63,-1.25,-0.54,-0.45,-1.33,
     +          -0.47,-0.25,-1.41,-0.44,-0.04,-1.46,-0.45, 0.18,-1.50,
     +          -0.48, 0.40,-1.52/
c ---- ScS 700 km
 	data (( tau(i,j,8,7), i=1,3), j=1,19) /
     +          -2.25, 0.00, 0.00,-2.23,-0.22,-0.01,-2.17,-0.43,-0.05,
     +          -2.08,-0.62,-0.11,-1.96,-0.79,-0.19,-1.81,-0.93,-0.29,
     +          -1.64,-1.03,-0.41,-1.46,-1.09,-0.53,-1.28,-1.11,-0.66,
     +          -1.10,-1.09,-0.79,-0.92,-1.04,-0.91,-0.76,-0.94,-1.04,
     +          -0.62,-0.82,-1.15,-0.50,-0.66,-1.25,-0.41,-0.48,-1.34,
     +          -0.35,-0.28,-1.42,-0.32,-0.07,-1.47,-0.32, 0.15,-1.51,
     +          -0.36, 0.37,-1.53/
c ---- SKSac 0 km
 	data (( tau(i,j,1,8), i=1,3), j=1,16) /
     +          -1.01,-0.55,-1.23,-0.92,-0.37,-1.33,-0.86,-0.17,-1.40,
     +          -0.83, 0.05,-1.46,-0.84, 0.29,-1.50,-0.88, 0.53,-1.51,
     +          -0.95, 0.77,-1.51,-1.05, 1.00,-1.48,-1.20, 1.22,-1.42,
     +          -1.37, 1.41,-1.35,-1.57, 1.57,-1.25,-1.79, 1.70,-1.14,
     +          -2.03, 1.78,-1.03,-2.28, 1.82,-0.90,-2.53, 1.81,-0.77,
     +          -2.79, 1.76,-0.63/
c ---- SKSac 35 km
 	data (( tau(i,j,2,8), i=1,3), j=1,16) /
     +          -0.98,-0.56,-1.23,-0.88,-0.37,-1.33,-0.82,-0.17,-1.40,
     +          -0.80, 0.04,-1.46,-0.80, 0.29,-1.50,-0.84, 0.53,-1.51,
     +          -0.91, 0.77,-1.51,-1.02, 1.00,-1.48,-1.16, 1.22,-1.42,
     +          -1.34, 1.41,-1.35,-1.53, 1.57,-1.25,-1.76, 1.69,-1.14,
     +          -1.99, 1.78,-1.03,-2.25, 1.82,-0.90,-2.50, 1.81,-0.77,
     +          -2.76, 1.76,-0.63/
c ---- SKSac 50 km
 	data (( tau(i,j,3,8), i=1,3), j=1,16) /
     +          -0.96,-0.56,-1.24,-0.87,-0.38,-1.33,-0.81,-0.18,-1.40,
     +          -0.78, 0.04,-1.46,-0.79, 0.28,-1.50,-0.83, 0.53,-1.52,
     +          -0.90, 0.77,-1.51,-1.01, 1.00,-1.48,-1.15, 1.22,-1.42,
     +          -1.33, 1.41,-1.35,-1.52, 1.57,-1.25,-1.75, 1.69,-1.14,
     +          -1.98, 1.78,-1.03,-2.24, 1.82,-0.90,-2.49, 1.81,-0.77,
     +          -2.74, 1.76,-0.63/
c ---- SKSac 100 km
 	data (( tau(i,j,4,8), i=1,3), j=1,16) /
     +          -0.92,-0.57,-1.24,-0.83,-0.38,-1.33,-0.77,-0.18,-1.40,
     +          -0.74, 0.03,-1.46,-0.75, 0.28,-1.50,-0.79, 0.52,-1.52,
     +          -0.86, 0.76,-1.51,-0.97, 0.99,-1.48,-1.11, 1.21,-1.42,
     +          -1.29, 1.41,-1.35,-1.48, 1.56,-1.26,-1.71, 1.69,-1.14,
     +          -1.94, 1.77,-1.03,-2.20, 1.82,-0.90,-2.45, 1.81,-0.77,
     +          -2.71, 1.76,-0.63/
c ---- SKSac 200 km
 	data (( tau(i,j,5,8), i=1,3), j=1,16) /
     +          -0.84,-0.58,-1.24,-0.75,-0.40,-1.33,-0.69,-0.20,-1.40,
     +          -0.67, 0.03,-1.46,-0.67, 0.27,-1.50,-0.71, 0.51,-1.52,
     +          -0.78, 0.76,-1.51,-0.89, 0.98,-1.48,-1.03, 1.20,-1.42,
     +          -1.21, 1.40,-1.35,-1.40, 1.56,-1.26,-1.63, 1.69,-1.15,
     +          -1.86, 1.77,-1.03,-2.12, 1.81,-0.90,-2.37, 1.81,-0.77,
     +          -2.63, 1.75,-0.63/
c ---- SKSac 300 km
 	data (( tau(i,j,6,8), i=1,3), j=1,16) /
     +          -0.77,-0.60,-1.24,-0.68,-0.41,-1.33,-0.62,-0.21,-1.41,
     +          -0.59, 0.02,-1.47,-0.60, 0.25,-1.50,-0.63, 0.50,-1.52,
     +          -0.71, 0.75,-1.51,-0.82, 0.98,-1.48,-0.96, 1.20,-1.42,
     +          -1.13, 1.39,-1.35,-1.33, 1.55,-1.26,-1.56, 1.68,-1.15,
     +          -1.79, 1.77,-1.03,-2.05, 1.81,-0.90,-2.30, 1.80,-0.77,
     +          -2.55, 1.75,-0.63/
c ---- SKSac 500 km
 	data (( tau(i,j,7,8), i=1,3), j=1,16) /
     +          -0.63,-0.63,-1.25,-0.54,-0.44,-1.34,-0.48,-0.23,-1.42,
     +          -0.45,-0.01,-1.47,-0.45, 0.22,-1.51,-0.49, 0.48,-1.53,
     +          -0.57, 0.73,-1.52,-0.68, 0.97,-1.48,-0.82, 1.18,-1.43,
     +          -0.99, 1.38,-1.35,-1.19, 1.54,-1.26,-1.42, 1.67,-1.15,
     +          -1.66, 1.76,-1.03,-1.91, 1.80,-0.90,-2.16, 1.80,-0.77,
     +          -2.42, 1.74,-0.63/
c ---- SKSac 700 km
 	data (( tau(i,j,8,8), i=1,3), j=1,16) /
     +          -0.50,-0.65,-1.26,-0.41,-0.47,-1.35,-0.35,-0.26,-1.42,
     +          -0.33,-0.03,-1.48,-0.33, 0.22,-1.52,-0.37, 0.46,-1.53,
     +          -0.45, 0.71,-1.52,-0.56, 0.95,-1.49,-0.70, 1.17,-1.43,
     +          -0.87, 1.37,-1.36,-1.07, 1.53,-1.26,-1.30, 1.66,-1.15,
     +          -1.54, 1.75,-1.03,-1.79, 1.79,-0.90,-2.05, 1.79,-0.77,
     +          -2.30, 1.74,-0.64/
c ---- SKSdf 0 km
 	data (( tau(i,j,1,9), i=1,3), j=1,16) /
     +          -1.20, 1.12,-1.48,-1.37, 1.34,-1.40,-1.57, 1.52,-1.29,
     +          -1.79, 1.66,-1.17,-2.03, 1.76,-1.04,-2.28, 1.81,-0.91,
     +          -2.53, 1.81,-0.77,-2.78, 1.75,-0.64,-3.02, 1.65,-0.50,
     +          -3.24, 1.51,-0.38,-3.44, 1.33,-0.27,-3.62, 1.11,-0.18,
     +          -3.76, 0.86,-0.10,-3.86, 0.59,-0.05,-3.92, 0.30,-0.01,
     +          -3.94, 0.00, 0.00/
c ---- SKSdf 35 km
 	data (( tau(i,j,2,9), i=1,3), j=1,16) /
     +          -1.17, 1.12,-1.48,-1.34, 1.34,-1.40,-1.53, 1.52,-1.29,
     +          -1.75, 1.66,-1.17,-1.99, 1.76,-1.04,-2.24, 1.81,-0.91,
     +          -2.49, 1.80,-0.77,-2.75, 1.75,-0.64,-2.99, 1.65,-0.50,
     +          -3.21, 1.51,-0.38,-3.41, 1.33,-0.27,-3.58, 1.11,-0.18,
     +          -3.72, 0.86,-0.10,-3.83, 0.59,-0.05,-3.89, 0.30,-0.01,
     +          -3.91, 0.00, 0.00/
c ---- SKSdf 50 km
 	data (( tau(i,j,3,9), i=1,3), j=1,16) /
     +          -1.16, 1.12,-1.48,-1.32, 1.34,-1.40,-1.52, 1.52,-1.29,
     +          -1.74, 1.66,-1.17,-1.98, 1.76,-1.04,-2.23, 1.81,-0.91,
     +          -2.48, 1.80,-0.77,-2.73, 1.75,-0.64,-2.97, 1.65,-0.50,
     +          -3.20, 1.51,-0.38,-3.40, 1.33,-0.27,-3.57, 1.11,-0.18,
     +          -3.71, 0.86,-0.10,-3.81, 0.59,-0.05,-3.88, 0.30,-0.01,
     +          -3.90, 0.00, 0.00/
c ---- SKSdf 100 km
 	data (( tau(i,j,4,9), i=1,3), j=1,16) /
     +          -1.12, 1.12,-1.48,-1.28, 1.34,-1.40,-1.48, 1.52,-1.29,
     +          -1.70, 1.66,-1.17,-1.94, 1.76,-1.04,-2.19, 1.81,-0.91,
     +          -2.44, 1.80,-0.77,-2.70, 1.75,-0.64,-2.94, 1.65,-0.50,
     +          -3.16, 1.51,-0.38,-3.36, 1.33,-0.27,-3.53, 1.11,-0.18,
     +          -3.67, 0.86,-0.10,-3.78, 0.59,-0.05,-3.84, 0.30,-0.01,
     +          -3.86, 0.00, 0.00/
c ---- SKSdf 200 km
 	data (( tau(i,j,5,9), i=1,3), j=1,16) /
     +          -1.04, 1.11,-1.48,-1.21, 1.33,-1.40,-1.40, 1.52,-1.29,
     +          -1.63, 1.66,-1.17,-1.87, 1.76,-1.04,-2.12, 1.80,-0.91,
     +          -2.37, 1.80,-0.77,-2.62, 1.75,-0.64,-2.86, 1.65,-0.51,
     +          -3.08, 1.51,-0.38,-3.28, 1.32,-0.27,-3.46, 1.10,-0.18,
     +          -3.60, 0.86,-0.10,-3.70, 0.58,-0.05,-3.76, 0.30,-0.01,
     +          -3.78, 0.00, 0.00/
c ---- SKSdf 300 km
 	data (( tau(i,j,6,9), i=1,3), j=1,16) /
     +          -0.97, 1.11,-1.48,-1.13, 1.33,-1.40,-1.33, 1.51,-1.29,
     +          -1.55, 1.66,-1.17,-1.79, 1.75,-1.04,-2.04, 1.80,-0.91,
     +          -2.29, 1.80,-0.77,-2.54, 1.75,-0.64,-2.78, 1.65,-0.51,
     +          -3.01, 1.51,-0.38,-3.21, 1.32,-0.27,-3.38, 1.10,-0.18,
     +          -3.52, 0.86,-0.10,-3.62, 0.58,-0.05,-3.69, 0.30,-0.01,
     +          -3.71, 0.00, 0.00/
c ---- SKSdf 500 km
 	data (( tau(i,j,7,9), i=1,3), j=1,16) /
     +          -0.83, 1.11,-1.49,-1.00, 1.33,-1.40,-1.19, 1.51,-1.29,
     +          -1.41, 1.65,-1.18,-1.65, 1.75,-1.05,-1.90, 1.79,-0.91,
     +          -2.16, 1.79,-0.77,-2.41, 1.74,-0.64,-2.65, 1.64,-0.51,
     +          -2.87, 1.50,-0.38,-3.07, 1.32,-0.27,-3.25, 1.10,-0.18,
     +          -3.39, 0.85,-0.10,-3.49, 0.58,-0.05,-3.55, 0.29,-0.01,
     +          -3.57, 0.00, 0.00/
c ---- SKSdf 700 km
 	data (( tau(i,j,8,9), i=1,3), j=1,16) /
     +          -0.71, 1.10,-1.49,-0.88, 1.32,-1.40,-1.07, 1.50,-1.30,
     +          -1.30, 1.65,-1.18,-1.54, 1.74,-1.05,-1.79, 1.79,-0.91,
     +          -2.04, 1.79,-0.77,-2.29, 1.74,-0.64,-2.53, 1.64,-0.51,
     +          -2.75, 1.50,-0.38,-2.95, 1.32,-0.27,-3.13, 1.10,-0.18,
     +          -3.27, 0.85,-0.10,-3.37, 0.58,-0.05,-3.43, 0.29,-0.01,
     +          -3.45, 0.00, 0.00/
c ---- ScP 0 km
 	data (( tau(i,j,1,10), i=1,3), j=1,13) /
     +          -2.12, 0.00, 0.00,-2.11,-0.11,-0.01,-2.08,-0.22,-0.03,
     +          -2.02,-0.32,-0.07,-1.95,-0.40,-0.11,-1.87,-0.47,-0.17,
     +          -1.78,-0.51,-0.23,-1.68,-0.54,-0.30,-1.58,-0.54,-0.38,
     +          -1.48,-0.53,-0.45,-1.39,-0.49,-0.52,-1.30,-0.43,-0.59,
     +          -1.23,-0.36,-0.66/
c ---- ScP 35 km
 	data (( tau(i,j,2,10), i=1,3), j=1,13) /
     +          -2.09, 0.00, 0.00,-2.08,-0.11,-0.01,-2.04,-0.22,-0.03,
     +          -1.99,-0.32,-0.07,-1.92,-0.41,-0.11,-1.83,-0.47,-0.17,
     +          -1.74,-0.52,-0.24,-1.64,-0.54,-0.31,-1.54,-0.55,-0.38,
     +          -1.45,-0.53,-0.45,-1.35,-0.49,-0.52,-1.27,-0.44,-0.59,
     +          -1.19,-0.36,-0.66/
c ---- ScP 50 km
 	data (( tau(i,j,3,10), i=1,3), j=1,13) /
     +          -2.07, 0.00, 0.00,-2.06,-0.12,-0.01,-2.03,-0.23,-0.03,
     +          -1.97,-0.33,-0.07,-1.90,-0.41,-0.12,-1.82,-0.48,-0.17,
     +          -1.72,-0.52,-0.24,-1.62,-0.54,-0.31,-1.52,-0.55,-0.38,
     +          -1.43,-0.53,-0.46,-1.33,-0.49,-0.53,-1.25,-0.43,-0.60,
     +          -1.18,-0.36,-0.66/
c ---- ScP 100 km
 	data (( tau(i,j,4,10), i=1,3), j=1,13) /
     +          -2.04, 0.00, 0.00,-2.02,-0.12,-0.01,-1.99,-0.23,-0.03,
     +          -1.93,-0.33,-0.07,-1.86,-0.42,-0.12,-1.77,-0.48,-0.18,
     +          -1.68,-0.53,-0.24,-1.58,-0.55,-0.32,-1.48,-0.55,-0.39,
     +          -1.38,-0.53,-0.46,-1.29,-0.49,-0.54,-1.20,-0.43,-0.60,
     +          -1.13,-0.35,-0.67/
c ---- ScP 200 km
 	data (( tau(i,j,5,10), i=1,3), j=1,13) /
     +          -1.96, 0.00, 0.00,-1.95,-0.12,-0.01,-1.92,-0.23,-0.03,
     +          -1.86,-0.33,-0.06,-1.79,-0.41,-0.11,-1.71,-0.48,-0.17,
     +          -1.62,-0.53,-0.23,-1.52,-0.55,-0.30,-1.42,-0.56,-0.37,
     +          -1.33,-0.54,-0.45,-1.23,-0.51,-0.52,-1.15,-0.46,-0.59,
     +          -1.07,-0.38,-0.65/
c ---- ScP 300 km
 	data (( tau(i,j,6,10), i=1,3), j=1,13) /
     +          -1.89, 0.00, 0.00,-1.87,-0.12,-0.01,-1.84,-0.23,-0.03,
     +          -1.79,-0.33,-0.06,-1.72,-0.42,-0.11,-1.64,-0.48,-0.17,
     +          -1.54,-0.53,-0.23,-1.45,-0.56,-0.30,-1.35,-0.57,-0.37,
     +          -1.25,-0.55,-0.45,-1.16,-0.52,-0.52,-1.07,-0.47,-0.59,
     +          -1.00,-0.39,-0.65/
c ---- ScP 500 km
 	data (( tau(i,j,7,10), i=1,3), j=1,13) /
     +          -1.75, 0.00, 0.00,-1.74,-0.12,-0.01,-1.71,-0.23,-0.03,
     +          -1.65,-0.34,-0.07,-1.58,-0.43,-0.11,-1.50,-0.50,-0.17,
     +          -1.41,-0.55,-0.23,-1.31,-0.58,-0.30,-1.21,-0.58,-0.38,
     +          -1.11,-0.57,-0.45,-1.02,-0.54,-0.52,-0.93,-0.48,-0.59,
     +          -0.86,-0.41,-0.66/
c ---- ScP 700 km
 	data (( tau(i,j,8,10), i=1,3), j=1,13) /
     +          -1.63, 0.00, 0.00,-1.62,-0.12,-0.01,-1.59,-0.24,-0.03,
     +          -1.53,-0.34,-0.07,-1.46,-0.44,-0.11,-1.38,-0.51,-0.17,
     +          -1.29,-0.56,-0.24,-1.19,-0.59,-0.31,-1.09,-0.60,-0.38,
     +          -0.99,-0.59,-0.45,-0.90,-0.55,-0.52,-0.81,-0.50,-0.59,
     +          -0.74,-0.43,-0.66/
c ---- SKP 0 km
 	data (( tau(i,j,1,11), i=1,3), j=1,15) /
     +          -1.52, 0.94,-0.95,-1.65, 1.07,-0.88,-1.80, 1.17,-0.80,
     +          -1.96, 1.24,-0.72,-2.00, 1.24,-0.67,-2.23, 1.28,-0.56,
     +          -2.48, 1.25,-0.44,-2.65, 1.18,-0.36,-2.81, 1.08,-0.27,
     +          -2.96, 0.95,-0.19,-3.08, 0.80,-0.13,-3.19, 0.62,-0.07,
     +          -3.26, 0.42,-0.03,-3.31, 0.21,-0.01,-3.32, 0.00, 0.00/
c ---- SKP 35 km
 	data (( tau(i,j,2,11), i=1,3), j=1,15) /
     +          -1.48, 0.94,-0.95,-1.61, 1.07,-0.88,-1.76, 1.17,-0.80,
     +          -1.93, 1.24,-0.72,-1.97, 1.24,-0.67,-2.20, 1.28,-0.57,
     +          -2.45, 1.25,-0.44,-2.62, 1.18,-0.36,-2.78, 1.08,-0.27,
     +          -2.92, 0.95,-0.19,-3.05, 0.80,-0.13,-3.15, 0.62,-0.07,
     +          -3.23, 0.42,-0.03,-3.27, 0.21,-0.01,-3.29, 0.00, 0.00/
c ---- SKP 50 km
 	data (( tau(i,j,3,11), i=1,3), j=1,15) /
     +          -1.47, 0.94,-0.95,-1.60, 1.06,-0.88,-1.75, 1.17,-0.80,
     +          -1.91, 1.24,-0.72,-1.96, 1.24,-0.67,-2.18, 1.28,-0.57,
     +          -2.44, 1.25,-0.44,-2.61, 1.18,-0.36,-2.77, 1.08,-0.27,
     +          -2.91, 0.95,-0.19,-3.04, 0.80,-0.13,-3.14, 0.62,-0.07,
     +          -3.22, 0.42,-0.03,-3.26, 0.21,-0.01,-3.28, 0.00, 0.00/
c ---- SKP 100 km
 	data (( tau(i,j,4,11), i=1,3), j=1,15) /
     +          -1.43, 0.93,-0.95,-1.56, 1.06,-0.88,-1.71, 1.16,-0.80,
     +          -1.88, 1.24,-0.72,-1.92, 1.24,-0.67,-2.14, 1.28,-0.57,
     +          -2.40, 1.24,-0.44,-2.57, 1.18,-0.36,-2.73, 1.08,-0.27,
     +          -2.87, 0.95,-0.19,-3.00, 0.80,-0.13,-3.10, 0.62,-0.07,
     +          -3.18, 0.42,-0.03,-3.22, 0.21,-0.01,-3.24, 0.00, 0.00/
c ---- SKP 200 km
 	data (( tau(i,j,5,11), i=1,3), j=1,15) /
     +          -1.35, 0.93,-0.95,-1.49, 1.06,-0.88,-1.64, 1.16,-0.81,
     +          -1.80, 1.23,-0.72,-1.84, 1.24,-0.67,-2.07, 1.27,-0.57,
     +          -2.32, 1.24,-0.45,-2.49, 1.18,-0.36,-2.65, 1.08,-0.27,
     +          -2.80, 0.95,-0.19,-2.92, 0.79,-0.13,-3.02, 0.62,-0.07,
     +          -3.10, 0.42,-0.03,-3.15, 0.21,-0.01,-3.16, 0.00, 0.00/
c ---- SKP 300 km
 	data (( tau(i,j,6,11), i=1,3), j=1,15) /
     +          -1.28, 0.93,-0.95,-1.41, 1.06,-0.88,-1.56, 1.16,-0.81,
     +          -1.72, 1.23,-0.72,-1.77, 1.23,-0.67,-1.99, 1.27,-0.57,
     +          -2.25, 1.24,-0.45,-2.41, 1.17,-0.36,-2.57, 1.08,-0.27,
     +          -2.72, 0.95,-0.19,-2.85, 0.79,-0.13,-2.95, 0.62,-0.07,
     +          -3.03, 0.42,-0.03,-3.07, 0.21,-0.01,-3.09, 0.00, 0.00/
c ---- SKP 500 km
 	data (( tau(i,j,7,11), i=1,3), j=1,15) /
     +          -1.14, 0.92,-0.95,-1.27, 1.05,-0.88,-1.42, 1.15,-0.81,
     +          -1.59, 1.22,-0.72,-1.64, 1.23,-0.67,-1.86, 1.26,-0.57,
     +          -2.11, 1.23,-0.45,-2.28, 1.17,-0.36,-2.44, 1.07,-0.27,
     +          -2.59, 0.94,-0.19,-2.71, 0.79,-0.13,-2.81, 0.61,-0.07,
     +          -2.89, 0.42,-0.03,-2.94, 0.21,-0.01,-2.95, 0.00, 0.00/
c ---- SKP 700 km
 	data (( tau(i,j,8,11), i=1,3), j=1,15) /
     +          -1.02, 0.92,-0.95,-1.16, 1.05,-0.88,-1.30, 1.15,-0.81,
     +          -1.47, 1.22,-0.72,-1.53, 1.22,-0.67,-1.75, 1.25,-0.57,
     +          -1.99, 1.23,-0.45,-2.16, 1.17,-0.36,-2.32, 1.07,-0.27,
     +          -2.47, 0.94,-0.19,-2.59, 0.79,-0.13,-2.70, 0.61,-0.07,
     +          -2.77, 0.42,-0.03,-2.82, 0.21,-0.01,-2.83, 0.00, 0.00/
c
c
c       End of Declarations
c----------------------------------------------------------------------
c
c ----  set-up
c
	ecorr = 0.0
        ierr = 999
cj.s.	t0 = 0.0
cj.s.	t1 = 0.0
cj.s.	t2 = 0.0
	azir = azi * degrad
	ecolatr = ecolat * degrad
c
c ----	Get the index for the phase name.  If no table for the phase, 
c       return.
c
	if (phid(1:2).eq.'P ' .or. phid(1:3).eq.'Pn ' .or. phid(1:3)
     +      .eq.'Pg '.or. phid(1:3).eq.'Pb ' .or. phid(1:3).eq.'Pdi'
     +      .or. phid(1:3).eq.'PbP' .or. phid(1:3).eq.'PmP' ) 
     +      then
	  ips = 1
	else if (phid(1:3).eq.'pP ' .or. phid(1:4).eq.'pPn ' .or. 
     +           phid(1:4).eq.'pPg '.or. phid(1:4).eq.'pPb ' .or. 
     +           phid(1:4).eq.'pPdi') then
	  ips = 1
	else if (phid(1:3).eq.'sP ' .or. phid(1:4).eq.'sPn ' .or. 
     +           phid(1:4).eq.'sPg '.or. phid(1:4).eq.'sPb ' .or. 
     +           phid(1:4).eq.'sPdi') then
	  ips = 1
	else if (phid(1:4) .eq. 'PcP ') then
	  ips = 2
	else if (phid(1:6) .eq. 'PKPab ' .or. phid(1:6) .eq. 'pPKPab'
     +           .or. phid(1:6) .eq. 'sPKPab') then
	  ips = 3
	else if (phid(1:6) .eq. 'PKPbc ' .or. phid(1:6) .eq. 'pPKPbc'
     +           .or. phid(1:6) .eq. 'sPKPbc' .or.
     +           phid(1:6) .eq. 'PKPdif'      .or. 
     +           phid(1:7) .eq. 'pPKPdif'     .or. 
     +           phid(1:7) .eq. 'sPKPdif'      ) then
	  ips = 4
	else if (phid(1:6) .eq. 'PKPdf ' .or. phid(1:6) .eq. 'pPKPdf'
     +           .or. phid(1:6) .eq. 'sPKPdf') then
          ips = 5
	else if (phid(1:6) .eq. 'PKiKP ' .or. phid(1:6) .eq. 'pPKiKP'
     +           .or. phid(1:6) .eq. 'sPKiKP') then
          ips = 5
	else if (phid(1:2).eq.'S '.or. phid(1:3).eq.'Sn ' .or.
     +           phid(1:3).eq.'Sg ' .or. phid(1:3).eq.'Sb ' .or.
     +           phid(1:3).eq.'Sdi' .or. phid(1:3).eq.'Lg ' .or.
     +           phid(1:3).eq.'SbS' .or. phid(1:3).eq.'SmS' ) then
	  ips = 6
	else if (phid(1:3).eq.'pS ' .or. phid(1:4).eq.'pSn ' .or. 
     +           phid(1:4).eq.'pSg '.or. phid(1:4).eq.'pSb ' .or. 
     +           phid(1:4).eq.'pSdi') then
	  ips = 6
	else if (phid(1:3).eq.'sS ' .or. phid(1:4).eq.'sSn ' .or. 
     +           phid(1:4).eq.'sSg '.or. phid(1:4).eq.'sSb ' .or. 
     +           phid(1:4).eq.'sSdi') then
	  ips = 6
	else if (phid(1:4) .eq. 'ScS ') then
	  ips = 7
	else if (phid(1:6) .eq. 'SKSac ' .or. phid(1:6) .eq. 'pSKSac'
     +           .or. phid(1:6) .eq. 'sSKSac') then
	  ips = 8
	else if (phid(1:6) .eq. 'SKSdf ' .or. phid(1:6) .eq. 'pSKSdf'
     +           .or. phid(1:6) .eq. 'sSKSdf') then
	  ips = 9
	else if (phid(1:4) .eq. 'ScP ') then
	  ips = 10
	else if (phid(1:4) .eq. 'SKP ') then
	  ips = 11
	else
	  return
	endif
c
c ----  check depth and distance to be within limits
c
	if( del .lt. delmin(ips) .or. del .gt. delmax(ips) ) return
	if( z .lt. 0.0 .or. z .gt. 700. ) return
c
c
c ----  find the depth index for the value just less than the input
c
	do i = 2,8
	  if(z.le.depth(i)) then
	    idep = i-1
	    goto 2
	  endif
	enddo
c
c ----  idel is the depth index just less than the input depth
c ----  dd is the fractional change in distance between the input 
c       distance and the next closest depth index
c ----  dz is the fractional change in depth between the depth at idel
c       and the input depth
c
2	delta = del - delmin(ips)
	idel = 1 + int((delta+0.0001)/delinc)
	idel = min( idel,int((delmax(ips)-delmin(ips))/delinc) )
	dd = 1.0 + (delta/delinc)  - float(idel)
	dz = (z - depth(idep)) / (depth(idep+1) - depth(idep))
c
c ----  compute the three t terms using bilinear interpolation
c
	idel1 = idel + 1
	idep1 = idep + 1
	do i = 1,3
	  t(i) = (1.0-dz)*    dd   * tau(i,idel1,idep,ips)    + 
     +               dz  *    dd   * tau(i,idel1,idep1,ips)   +
     +               dz  *(1.0-dd) * tau(i,idel,idep1,ips)    +
     +           (1.0-dz)*(1.0-dd) * tau(i,idel,idep,ips)
	enddo
c
c ----  compute the correction
c
	anumber = 0.86602540375d0
	ecorr = 0.25*(1.0 + 3.0*cos(2.0*ecolatr))*t(1) +
     +          anumber*sin(2.0*ecolatr)*cos(azir)*t(2) +
     +          anumber*sin(ecolatr)*sin(ecolatr)*cos(2.0*azir)*t(3)
        ierr = 0
c
c ----	all done
c
	return
	end
      subroutine ellip2(ecolatr,azi,del,zo,phas,p,ecor,ierr)
c
c****6789012345678901234567890123456789012345678901234567890123456789012
c
c     Subroutine ellip2 call a routine to calculates an ellipticity 
c     correction for a given source-receiver combination for seismic 
c     phases of the AK135 tables (as far as availablbe). Approximation 
c     for several not defined phases.
c
c     input:  ecolatr       geocentric colatitude of the event in rad
c
c             azi           azimuth from event to station in deg
c
c             del           distance between event and station in deg
c
c             zo            event depth in km
c
c             phas          phase name
c
c             p             ray paramter of phase in sec/deg
c
c     output: ecor          ellipticity correction of this phase in sec
c
c             ierr          error status
c
c
c version:  25. October 1996,  johannes schweitzer
c

      integer ierr
      real*4  ecolate,azi,p,ecor,p1,delo,zo,del,azi1,ecolatr
      character*8 phas, phas1
      logical errf

c
c     definition of several constants:
c
      deg2rad = atan(1.) / 45.
      ierr    = 0
      ecor    = 0.
      azi1    = azi
      delo    = del
      p1      = p
      ecolate = ecolatr

      phas1 = phas

c
c     Search for multiple core phases observed at distance 0 deg,
c     but not for .PKi... or .SKi... phases.
c
c     In this case, the phases travelled once around the Earth and 
c     ray parameter p1 (=0.!) is not an indication for this!
c
      if(delo.eq.0. .and. 
     *   (phas1(3:3).ne.'i'.and.phas1(4:4).ne.'i') ) then
      	 if (phas1(1:2).eq.'PK'.or.phas1(1:2).eq.'SK') p1=-999.
      	 if (phas1(1:2).eq."P'".or.phas1(1:2).eq."S'") p1=-999.
      	 if (phas1(2:3).eq.'PK'.or.phas1(2:3).eq.'SK') p1=-999.
      	 if (phas1(2:3).eq."P'".or.phas1(2:3).eq."S'") p1=-999.
      endif

      if(p1.lt.0.) then
         delo = 360. - delo
         azi1 = azi1 - 180.
	 if(azi1.lt.0.) azi1 = 360. + azi1
      endif

      azi1    = deg2rad*azi1

      call elpcor2(phas1,delo,zo,ecolate,azi1,ecor,errf)

      if(errf) then
	ierr = 999
	ecor = 0.
      endif

      return
      end
c       SUBROUTINE ellip()
        SUBROUTINE elpcor2(phase,edist,edepth,ecolat,azim,tcor,abrt)
C=======================================================================
C                                                                         
C    Ellipticity correction for any given phase using
C    Dziewonski & Gilbert representation
C                                                   
C      The ellipticity corrections are found by linear interpolation       
C    in terms of values calculated for the ak135 model for a wide 
C    range of phases to match the output of the iasp software 
C
Cccj.s.     first call:  ellref(ecolat) 
Cccj.s.                        - to set up source dependent constants
C     2nd call  :  ellcor(phase,edist,depth,ecolat,azim,tcor,abrt) 
C                        - to calculate correction for a station
C
C    Parameters: 
C    character  
C          phase : a  string specifying the PHASE,   -e.g P, ScP etc.  
C                                                        
C    real 
C          edist  :  epicentral distance to station (in degrees)     
C          edepth :  depth of event         
C          ecolat :  epicentral co-latitude of source (in radians) 
C          azim   :  azimuth from source to station (in radians)
C                                
C          tcor   :  time correction for path to allow for ellipticity
C 
C    logical 
C          abrt   :  a logical variable -usally set to .FALSE.  
C                    which is set to .TRUE. if a phase for      
C                    which no data is available is chosen       
C                                                                         
C=======================================================================
C   B.L.N. Kennett RSES,ANU        May 1995, August 1996                 
C   (based on earlier routine by D.J. Brown)
C   with input from W. Spakman, Utrecht
C=======================================================================
c
c    Slightly changed version:
c           input of data (path via environment variable HYPOSAT_DATA)
c           calling name elcor2
c           no initial call
c
c    October 1996 J. Schweitzer, Bochum
c
c       environment variable name corrected: Jan 27, 1997
c
c
      save sc0,sc1,sc2

      character *(*) phase
      character*8 phcod(57)
      integer phind(57),phspn(57),phnch(57)
      real edist,edepth,ecolat,azim,
     ^     sc0,sc1,sc2,s3,tcor,
     ^     tau0, a0,b0,h0,d0,e0,f0,g0,
     ^     tau1, a1,b1,h1,d1,e1,f1,g1,
     ^     tau2, a2,b2,h2,d2,e2,f2,g2
      real dpth(6),delta(50)
      real t0(50,6),t1(50,6),t2(50,6)
      integer Ne,Nd
      logical abrt
c
c j.s.
c     
      character ic*80, file_check*80
      integer trimle
      data phcod/
     & 'Pup   ','P     ','Pdif  ','PKPab ','PKPbc ','PKPdf ',
     & 'PKiKP ','pP    ','pPKPab','pPKPbc','pPKPdf','pPKiKP',
     & 'sP    ','sPKPab','sPKPbc','sPKPdf','sPKiKP','PcP   ',
     & 'ScP   ','SKPab ','SKPbc ','SKPdf ','SKiKP ','PKKPab',
     & 'PKKPbc','PKKPdf','SKKPab','SKKPbc','SKKPdf','PP    ',
     & "P'P'  ",'Sup   ','S     ','Sdif  ','SKSac ','SKSdf ',
     & 'pS    ','pSKSac','pSKSdf','sS    ','sSKSac','sSKSdf',
     & 'ScS   ','PcS   ','PKSab ','PKSbc ','PKSdf ','PKKSab',
     & 'PKKSbc','PKKSdf','SKKSac','SKKSdf','SS    ',"S'S'  ",
     & 'SP    ','PS    ','PnS   '/
      data phind/
     &        1,      14,      91,     136,     165,     178,
     &      235,     364,     433,     462,     475,     532,
     &      661,     742,     771,     784,     841,     970,
     &     1047,    1100,    1113,    1134,    1195,    1316,
     &     1337,    1382,    1507,    1516,    1573,    1702,
     &     1827,    1932,    1945,    2022,    2067,    2132,
     &     2197,    2234,    2295,    2356,    2425,    2490,
     &     2551,    2628,    2681,    2694,    2711,    2772,
     &     2781,    2838,    2967,    3140,    3273,    3398,
     &     3587,    3656,    3697/
      data phspn/
     &        3,      19,      11,       7,       3,      14,
     &       32,      17,       7,       3,      14,      32,
     &       20,       7,       3,      14,      32,      19,
     &       13,       3,       5,      15,      30,       5,
     &       11,      31,       2,      14,      32,      31,
     &       26,       3,      19,      11,      16,      16,
     &        9,      15,      15,      17,      16,      15,
     &       19,      13,       3,       4,      15,       2,
     &       14,      32,      43,      33,      31,      47,
     &       17,      10,       6/ 
      data phnch/
     &        3,       1,       5,       5,       5,       5,
     &        5,       2,       6,       6,       6,       6,
     &        2,       6,       6,       6,       6,       3,
     &        3,       5,       5,       5,       5,       6,
     &        6,       6,       6,       6,       6,       2,
     &        4,       3,       1,       5,       5,       5,
     &        2,       6,       6,       2,       6,       6,
     &        3,       3,       5,       5,       5,       6,
     &        6,       6,       6,       6,       2,       4,
     &        2,       2,       3/ 
      data dpth/ 0.0, 100.0, 200.0, 300.0, 500.0, 700.0 /
c...
c     In addition to the phase names listed above a number of phase 
c     aliases are available in the routine phase_alias, e.g. Pn --> 
c     P etc. The input phase code is first checked against the phcod 
C     array and next against the phase aliases.
c<sc>
c	           initial call to set up source dependent constants
cj.s. entry ellref(ecolat)
c                                            
      s3 = sqrt(3.0)/2.0
      sc0 = 0.25*(1.0+3.0*cos(2.0*ecolat))
      sc1 = s3*sin(2.0*ecolat)
      sc2 = s3*sin(ecolat)*sin(ecolat)
c     return
c<sc>
c<ec>                                           phase identification
cj.s. entry ellcor(phase,edist,edepth,ecolat,azim,tcor,abrt)
*      write(6,*) "phase,edist,edepth,ecolat,azim"
*      write(6,*)  phase,edist,edepth,ecolat,azim
      Nd = 6
      NUMPH = 57
      deldst = 5.0
      abrt = .FALSE.
c                                       check on the length of phase
      l=len(phase)
      if(l.lt.8) then
       stop 
     >    'character variable `phase` should have at least length 8'
      endif

c                                             select phase
      ip = -1
c
c j.s.      nc=min(lnblk(phase),8)
c     to reduce code, use only one function to count characters
c
      nc=min(trimle(phase),8)
      do 10 i=1,NUMPH
        if(nc.ne.phnch(i)) goto 10
        if (phase(1:nc) .eq. phcod(i)(1:nc)) then
          ip = i
          go to 11
        endif
 10   continue
 11   continue

      if(ip.eq.-1) then
c                                             check phase aliases
        call phase_alias(phase,edist,ip)
      endif
c                                              phase not found
*      write(6,*) "ip:",ip
      if(ip.lt.0) then
*       write(6,*) phase,'  is not available'
        abrt = .true.
        return
      endif
      Ne = phspn(ip)
c                                          special case of upgoing waves
*
c                                              acquire phase information
c
c     changes for Bochum Oct 23, 1996 J.S.
c
c          open ellipticity correction file saved in varibale 'ic'
c

       ic = file_check('elcordir.tbl')
 
       open(35,file=ic(1:trimle(ic)),
     +            access='direct',form='formatted',recl=80) 

       nr = phind(ip)
*       write(6,*) "nrec:",nr
       read(35,61,rec=nr) phcod(ip),np,d1,d2
*       write(6,*) "phcode,np,d1,d2: ", phcod(ip),np,d1,d2
       nr = nr+1
       if(np.ne.Ne) write(6,*) 'HELP! - index wrong'
       do 15 i=1,np
         read(35,62,rec=nr) delta(i)
         nr = nr+1
         read(35,63,rec=nr) (t0(i,m),m=1,6)
         nr = nr+1
         read(35,63,rec=nr) (t1(i,m),m=1,6)
         nr = nr+1
         read(35,63,rec=nr) (t2(i,m),m=1,6)
         nr = nr+1
 15    continue         
 61    format(a8,i10,2f10.0)
 62    format(f10.0)
 63    format(6f10.4)


c 
       close (35)
c

c                                  distance index
       idist = 1 + int( (edist-d1)/ deldst )
       if(edist.lt.d1) idist =1
       if(edist.gt.d2) idist= np-1
c                                  depth index
       do 25 j = 1,Nd-1
         if ((dpth(j).le.edepth).and.(dpth(j+1).ge.edepth))then
            jdepth = j
            goto 26
         endif
 25    continue
 26    continue
*       write(6,*) "idist, jdepth;",idist,jdepth
c
*                      need to allow for zero entries (where phase
*                      description strongly depth dependent)
c tau0
         a0 = t0(idist,jdepth)
         b0 = t0(idist,jdepth+1)
         h0 = t0(idist+1,jdepth+1)
         d0 = t0(idist+1,jdepth)
         e0 = a0 + 
     ^       (d0-a0)*(edist-delta(idist))/(delta(idist+1)-delta(idist))
         f0 = b0 + 
     ^       (h0-b0)*(edist-delta(idist))/(delta(idist+1)-delta(idist))
         g0 = e0 + (f0-e0)*
     ^             (edepth-dpth(jdepth))/(dpth(jdepth+1)-dpth(jdepth))
         tau0 = g0
c tau1
         a1 = t1(idist,jdepth)
         b1 = t1(idist,jdepth+1)
         h1 = t1(idist+1,jdepth+1)
         d1 = t1(idist+1,jdepth)
         e1 = a1 + 
     ^       (d1-a1)*(edist-delta(idist))/(delta(idist+1)-delta(idist))
         f1 = b1 + 
     ^       (h1-b1)*(edist-delta(idist))/(delta(idist+1)-delta(idist))
         g1 = e1 + (f1-e1)*
     ^             (edepth-dpth(jdepth))/(dpth(jdepth+1)-dpth(jdepth))
         tau1 = g1
c tau2
         a2 = t2(idist,jdepth)
         b2 = t2(idist,jdepth+1)
         h2 = t2(idist+1,jdepth+1)
         d2 = t2(idist+1,jdepth)
         e2 = a2 + 
     ^       (d2-a2)*(edist-delta(idist))/(delta(idist+1)-delta(idist))
         f2 = b2 + 
     ^       (h2-b2)*(edist-delta(idist))/(delta(idist+1)-delta(idist))
         g2 = e2 + (f2-e2)*
     ^             (edepth-dpth(jdepth))/(dpth(jdepth+1)-dpth(jdepth))
         tau2 = g2
c
*         write(6,*) "tau0,tau1,tau2:",tau0,tau1,tau2
c j.s.   caz = cos(azim)
c j.s.   cbz = cos(2.0*azim)
*         write(6,*) "azim,caz,cbz",azim,caz,cbz    
c
         tcor = sc0*tau0 + sc1*cos(azim)*tau1 + sc2*cos(2.0*azim)*tau2
c
      return
c<ec>
      end
      subroutine phase_alias(phase,delta,ip)

c     check for alternative phase names
c     to get ellipticity corrections
c
c     input phase, delta
c     output ip (index of phcod)

      character*(*) phase

      if(phase(1:3).eq.'Pg ') then
c       phase='P       '
        ip=2
      else if(phase(1:3).eq.'Sg ') then
c       phase='S       '
        ip=33
      else if(phase(1:3).eq.'Lg ') then
c       phase='S       '
        ip=33
      else if(phase(1:4).eq.'pPg ') then
c       phase='pP      '
        ip=8
      else if(phase(1:4).eq.'sPg ') then
c       phase='sP      '
        ip=13
      else if(phase(1:4).eq.'pSg ') then
c       phase='pS      '
        ip=37
      else if(phase(1:4).eq.'sSg ') then
c       phase='sS      '
        ip=40
c
      elseif(phase(1:3).eq.'Pb ') then
c       phase='P       '
        ip=2
      else if(phase(1:3).eq.'Sb ') then
c       phase='S       '
        ip=33
      else if(phase(1:4).eq.'pPb ') then
c       phase='pP      '
        ip=8
      else if(phase(1:4).eq.'sPb ') then
c       phase='sP      '
        ip=13
      else if(phase(1:4).eq.'pSb ') then
c       phase='pS      '
        ip=37
      else if(phase(1:4).eq.'sSb ') then
c       phase='sS      '
c
      elseif(phase(1:3).eq.'Pn ') then
c       phase='P       '
        ip=2
      else if(phase(1:3).eq.'Sn ') then
c       phase='S       '
        ip=33
      else if(phase(1:4).eq.'pPn ') then
c       phase='pP      '
        ip=8
      else if(phase(1:4).eq.'sPn ') then
c       phase='sP      '
        ip=13
      else if(phase(1:4).eq.'pSn ') then
c       phase='pS      '
        ip=37
      else if(phase(1:4).eq.'sSn ') then
c       phase='sS      '
        ip=40
      else if(phase(1:4).eq.'SPn ') then
c       phase='SP      '
        ip=55
      else if(phase(1:4).eq.'SPb ') then
c       phase='SP      '
        ip=55
      else if(phase(1:4).eq.'SPg ') then
c       phase='SP      '
        ip=55
      else if(phase(1:4).eq.'SnP ') then
c       phase='SP      '
        ip=55
      else if(phase(1:4).eq.'PSn ') then
c       phase='PS      '
        ip=56
      else if(phase(1:5).eq.'PnPn ') then
c       phase='PP      '
        ip=30
      else if(phase(1:5).eq.'SnSn ') then
c       phase='SS      '
        ip=53
      elseif(phase(1:3).eq.'PbP ') then
c       phase='P       '
        ip=2
      elseif(phase(1:3).eq.'PmP ') then
c       phase='P       '
        ip=2
      elseif(phase(1:3).eq.'SbS ') then
c       phase='S       '
        ip=33
      elseif(phase(1:3).eq.'SmS ') then
c       phase='S       '
        ip=33
      elseif(phase(1:3).eq.'PbS ') then
c       phase='PS      '
        ip=56
      elseif(phase(1:3).eq.'PmS ') then
c       phase='PS      '
        ip=56
      elseif(phase(1:3).eq.'SbP ') then
c       phase='SP      '
        ip=55
      elseif(phase(1:3).eq.'SmP ') then
c       phase='SP      '
        ip=55
c                                       upgoing P, S
      else if(phase(1:2).eq.'p ') then
c       phase='Pup     '
        ip=1  
      else if(phase(1:2).eq.'s ') then
c       phase='Sup     '
        ip=32 
c                                        
      else if(delta.le.100.0.and.phase.eq.'pPdif   ') then
c       phase='pP      '
        ip=8
      else if(delta.le.100.0.and.phase.eq.'sPdif   ') then
c       phase='sP      '
        ip=13
      else if(delta.le.100.0.and.phase.eq.'pSdif   ') then
c       phase='pS      '
        ip=37
      else if(delta.le.100.0.and.phase.eq.'sSdif   ') then
c       phase='sS      '
        ip=40
      else if(delta.le.165.0.and.phase.eq.'PKPdif  ') then
c       phase='PKPbc '
        ip=5
      else if(delta.le.165.0.and.phase.eq.'pPKPdif ') then
c       phase='pPKPbc '
        ip=10
      else if(delta.le.165.0.and.phase.eq.'sPKPdif ') then
c       phase='sPKPbc '
        ip=15
c                             
      else if(phase(1:4).eq."P'P'") then
c       phase="P'P'    "
        ip =31
      else if(phase(1:4).eq."S'S'") then
c       phase="S'S'    "
        ip =54
c                            diffractions (approx)
      else if(delta.gt.100.0.and.phase.eq.'pPdif   ') then
c       phase='Pdif    '
        ip=3
      else if(delta.gt.100.0.and.phase.eq.'sPdif   ') then
c       phase='Pdif    '
        ip=3
      else if(delta.gt.100.0.and.phase.eq.'pSdif   ') then
c       phase='Sdif    '
        ip=34
      else if(delta.gt.100.0.and.phase.eq.'sSdif   ') then
c       phase='Sdif     '
        ip=34
c
      else
        ip=-1
      endif
      return
      end
